/*

OpenImageIO bindings

https://sites.google.com/site/openimageio/home

*/
package oiio

/*
#cgo CPPFLAGS: -I./cpp
#cgo CPPFLAGS: -I/usr/local/include
#cgo LDFLAGS: -lstdc++
#cgo LDFLAGS: -L/usr/local/lib -lOpenImageIO

#include "stdlib.h"

#include "cpp/oiio.h"

*/
import "C"

import (
	"errors"
	"runtime"
	"unsafe"
)

type ImageInput struct {
	ptr unsafe.Pointer
}

func newImageInput(i unsafe.Pointer) *ImageInput {
	in := &ImageInput{i}
	runtime.SetFinalizer(in, deleteImageInput)
	return in
}

func deleteImageInput(i *ImageInput) {
	C.free(i.ptr)
}

func OpenImageInput(filename string) (*ImageInput, error) {
	c_str := C.CString(filename)
	defer C.free(unsafe.Pointer(c_str))

	cfg := unsafe.Pointer(nil)
	ptr := C.ImageInput_Open(c_str, cfg)

	in := newImageInput(ptr)

	return in, in.LastError()
}

// Return the last error generated by API calls, as a string
// An empty string will be returned if no error has occured.
func (i *ImageInput) LastError() error {
	err := C.GoString(C.ImageInput_geterror(i.ptr))
	if err == "" {
		return nil
	}
	return errors.New(err)
}

// Return the name of the format implemented by this image.
func (i *ImageInput) FormatName() string {
	return C.GoString(C.ImageInput_format_name(i.ptr))
}

func (i *ImageInput) Close() error {
	if !bool(C.ImageInput_close(i.ptr)) {
		return i.LastError()
	}
	return nil
}
